// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String                   @id @default(uuid())
  slug           String                   @unique
  title          String
  mainImage      String
  price          Int                      @default(0)
  rating         Int                      @default(0)
  description    String
  manufacturer   String
  inStock        Int                      @default(1)
  categoryId     String
  category       Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  customerOrders customer_order_product[]
  Wishlist       Wishlist[]

  merchantId     String
  merchant       Merchant @relation(fields: [merchantId], references: [id])
  // Back relation for bulk upload items
  bulkUploadItems bulk_upload_item[]      @relation("ProductBulkItems")
}

model Image {
  imageID   String @id @default(uuid())
  productID String
  image     String
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String?
  role          String?        @default("user")
  Wishlist      Wishlist[]
  notifications Notification[]
  // Back relation for bulk upload batches
  bulkUploadBatches bulk_upload_batch[] @relation("UserBatches")
}

model Customer_order {
  id          String                   @id @default(uuid())
  name        String
  lastname    String
  phone       String
  email       String
  company     String
  adress      String
  apartment   String
  postalCode  String
  dateTime    DateTime?                @default(now())
  status      String
  city        String
  country     String
  orderNotice String?
  total       Int
  products    customer_order_product[]
}

model customer_order_product {
  id              String         @id @default(uuid())
  customerOrder   Customer_order @relation(fields: [customerOrderId], references: [id])
  customerOrderId String
  product         Product        @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[] // Define a one-to-many relationship
}

model Wishlist {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_STATUS
  PROMOTION
  SYSTEM_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Notification {
  id        String               @id @default(uuid())
  userId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String               @db.Text
  type      NotificationType
  isRead    Boolean              @default(false)
  priority  NotificationPriority @default(NORMAL)
  metadata  Json?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([userId])
  @@index([userId, isRead])
  @@index([userId, type])
  @@index([createdAt])
}
model Merchant {
  id          String   @id @default(uuid())
  name        String
  description String?
  email       String?
  phone       String?
  address     String?
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relasi
  products Product[]
}

model bulk_upload_batch {
  id         String              @id @default(uuid())
  fileName   String?
  createdAt  DateTime            @default(now())
  status     BulkUploadStatus    @default(PENDING)
  itemCount  Int                 @default(0)
  errorCount Int                 @default(0)
  items      bulk_upload_item[]

  // optional uploader link if you later associate sessions/users
  userId String?
  user   User?                  @relation(name: "UserBatches", fields: [userId], references: [id])
}

model bulk_upload_item {
  id        String            @id @default(uuid())
  batchId   String
  batch     bulk_upload_batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  // created product reference
  productId String?
  product   Product?          @relation(name: "ProductBulkItems", fields: [productId], references: [id], onDelete: SetNull)

  // snapshot fields for auditing and re-commit edits
  title         String
  slug          String
  price         Int
  manufacturer  String?
  description   String?
  mainImage     String?
  categoryId    String
  inStock       Int

  status        BulkUploadItemStatus @default(CREATED)
  error         String?
}

enum BulkUploadStatus {
  PENDING
  COMPLETED
  PARTIAL
  FAILED
}

enum BulkUploadItemStatus {
  CREATED
  UPDATED
  ERROR
}
