generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String                   @id @default(uuid())
  slug           String                   @unique
  title          String
  mainImage      String
  price          Int                      @default(0)
  rating         Int                      @default(0)
  description    String
  manufacturer   String
  inStock        Int                      @default(1)
  categoryId     String
  category       Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  projects       ProjectProduct[]
  Wishlist       Wishlist[]
  customerOrders customer_order_product[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model Image {
  imageID   String @id @default(uuid())
  productID String
  image     String
}

model customer_order_product {
  id              String  @id @default(uuid())
  customerOrderId String
  productId       String
  quantity        Int
  product         Product @relation(fields: [productId], references: [id])

  @@index([customerOrderId], map: "customer_order_product_customerOrderId_fkey")
  @@index([productId], map: "customer_order_product_productId_fkey")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Wishlist {
  id        String  @id @default(uuid())
  productId String
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Wishlist_productId_fkey")
  @@index([userId], map: "Wishlist_userId_fkey")
}

model Project {
  id           String           @id @default(uuid())
  name         String
  createdAt    DateTime         @default(now())
  itemCount    Int              @default(0)
  contractorId String
  products     ProjectProduct[]
  files        ProjectFile[]

  @@index([contractorId], map: "Project_contractorId_fkey")
}

model ProjectProduct {
  id        String  @id @default(uuid())
  quantity  Int
  projectId String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "ProjectProduct_projectId_fkey")
  @@index([productId], map: "ProjectProduct_productId_fkey")
}

model ProjectFile {
  id           String   @id @default(uuid())
  filename     String
  originalname String
  mimetype     String
  size         Int
  path         String
  uploadedAt   DateTime @default(now())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "ProjectFile_projectId_fkey")
}

model customer_order {
  id          String    @id
  name        String
  lastname    String
  phone       String
  email       String
  company     String
  adress      String
  apartment   String
  postalCode  String
  dateTime    DateTime? @default(now())
  status      String
  total       Int
  city        String
  country     String
  orderNotice String?
}

model user {
  id       String  @id
  email    String  @unique(map: "User_email_key")
  password String?
  role     String? @default("user")
}
